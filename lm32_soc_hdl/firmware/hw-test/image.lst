
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008e4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000a4  000008e4  000008e4  00000938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000020  00000988  00000988  000009dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  000009a8  000009a8  000009fc  2**2
                  ALLOC
  4 .debug_abbrev 00000370  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000078e  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000031e  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000212  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000009a  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000262e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000028d  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000028fb  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000030  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ac 	calli 37c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 b0 	ori gp,gp,0x9b0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 a8 	ori r1,r1,0x9a8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a 34 	ori r3,r3,0xa34

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5c 	calli 2ac <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 * 
 */
#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0b 00 08 	mvi r11,8
 220:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
 228:	e0 00 00 02 	bi 230 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
 22c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 230:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 234:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 238:	51 a2 00 0a 	bgeu r13,r2,260 <writeint+0x58>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 23c:	35 6b ff ff 	addi r11,r11,-1
 240:	f8 00 00 dd 	calli 5b4 <uart_putchar>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 244:	5d 60 ff fa 	bne r11,r0,22c <writeint+0x24>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 10 	lw r11,(sp+16)
 250:	2b 8c 00 0c 	lw r12,(sp+12)
 254:	2b 8d 00 08 	lw r13,(sp+8)
 258:	37 9c 00 10 	addi sp,sp,16
 25c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 260:	34 41 00 30 	addi r1,r2,48
 264:	e3 ff ff f6 	bi 23c <writeint+0x34>

00000268 <test2>:
		val <<= 4;
	}
}

void test2() {
 268:	37 9c ff fc 	addi sp,sp,-4
 26c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('b');   
 270:	34 01 00 62 	mvi r1,98
 274:	f8 00 00 d0 	calli 5b4 <uart_putchar>
}
 278:	2b 9d 00 04 	lw ra,(sp+4)
 27c:	37 9c 00 04 	addi sp,sp,4
 280:	c3 a0 00 00 	ret

00000284 <test>:

void test() {
 284:	37 9c ff fc 	addi sp,sp,-4
 288:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('a');
 28c:	34 01 00 61 	mvi r1,97
 290:	f8 00 00 c9 	calli 5b4 <uart_putchar>
    test2();
 294:	fb ff ff f5 	calli 268 <test2>
    uart_putchar('c');
 298:	34 01 00 63 	mvi r1,99
 29c:	f8 00 00 c6 	calli 5b4 <uart_putchar>
} 
 2a0:	2b 9d 00 04 	lw ra,(sp+4)
 2a4:	37 9c 00 04 	addi sp,sp,4
 2a8:	c3 a0 00 00 	ret

000002ac <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 2ac:	37 9c ff fc 	addi sp,sp,-4
 2b0:	5b 9d 00 04 	sw (sp+4),ra
    init_wifi();
 2b4:	f8 00 00 f5 	calli 688 <init_wifi>
	uart_putstr("Entering Echo Test...\n");
	while (1) {
	   uart_putchar(uart_getchar());
	}
******************************************************/
}
 2b8:	2b 9d 00 04 	lw ra,(sp+4)
 2bc:	37 9c 00 04 	addi sp,sp,4
 2c0:	c3 a0 00 00 	ret

000002c4 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2c4:	c3 a0 00 00 	ret

000002c8 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2c8:	78 01 00 00 	mvhi r1,0x0
 2cc:	38 21 0a 30 	ori r1,r1,0xa30
 2d0:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2d4:	78 02 00 00 	mvhi r2,0x0
 2d8:	38 42 09 94 	ori r2,r2,0x994
 2dc:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2e0:	34 63 00 01 	addi r3,r3,1
 2e4:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2e8:	34 01 00 0e 	mvi r1,14
 2ec:	58 41 00 00 	sw (r2+0),r1
}
 2f0:	c3 a0 00 00 	ret

000002f4 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2f4:	78 01 00 00 	mvhi r1,0x0
 2f8:	38 21 09 90 	ori r1,r1,0x990
       uart1->rxtx=31;
 2fc:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 300:	28 25 00 00 	lw r5,(r1+0)
       uart1->rxtx=31;
 304:	38 42 09 a4 	ori r2,r2,0x9a4
	   timer0->tcr0 = 0xAA;
 308:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
       uart1->rxtx=31;
 30c:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 310:	38 21 09 94 	ori r1,r1,0x994
	   gpio0->ctrl=0x55;
 314:	78 02 00 00 	mvhi r2,0x0

void prueba()
{
	   uart0->rxtx=30;
       uart1->rxtx=31;
	   timer0->tcr0 = 0xAA;
 318:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 31c:	38 42 09 98 	ori r2,r2,0x998
	   spi0->rxtx=1;
 320:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 324:	34 06 00 1e 	mvi r6,30
 328:	58 a6 00 04 	sw (r5+4),r6
       uart1->rxtx=31;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 32c:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 330:	38 21 09 9c 	ori r1,r1,0x99c
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
       uart1->rxtx=31;
 334:	34 05 00 1f 	mvi r5,31
 338:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 33c:	28 21 00 00 	lw r1,(r1+0)

void prueba()
{
	   uart0->rxtx=30;
       uart1->rxtx=31;
	   timer0->tcr0 = 0xAA;
 340:	34 04 00 aa 	mvi r4,170
 344:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 348:	34 03 00 55 	mvi r3,85
 34c:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 350:	34 02 00 01 	mvi r2,1
 354:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 358:	34 02 00 02 	mvi r2,2
 35c:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 360:	34 02 00 03 	mvi r2,3
 364:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 368:	34 02 00 04 	mvi r2,4
 36c:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 370:	34 02 00 05 	mvi r2,5
 374:	58 22 00 0c 	sw (r1+12),r2

}
 378:	c3 a0 00 00 	ret

0000037c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 37c:	37 9c ff f0 	addi sp,sp,-16
 380:	5b 8b 00 10 	sw (sp+16),r11
 384:	5b 8c 00 0c 	sw (sp+12),r12
 388:	5b 8d 00 08 	sw (sp+8),r13
 38c:	5b 9d 00 04 	sw (sp+4),ra
 390:	78 0b 00 00 	mvhi r11,0x0
 394:	39 6b 09 b0 	ori r11,r11,0x9b0
 398:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 39c:	35 6d 00 80 	addi r13,r11,128
 3a0:	e0 00 00 04 	bi 3b0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3a4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3a8:	45 6d 00 08 	be r11,r13,3c8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3ac:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b0:	21 81 00 01 	andi r1,r12,0x1
 3b4:	44 20 ff fc 	be r1,r0,3a4 <irq_handler+0x28>
 3b8:	29 61 00 00 	lw r1,(r11+0)
 3bc:	35 6b 00 04 	addi r11,r11,4
 3c0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3c4:	5d 6d ff fa 	bne r11,r13,3ac <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3c8:	2b 9d 00 04 	lw ra,(sp+4)
 3cc:	2b 8b 00 10 	lw r11,(sp+16)
 3d0:	2b 8c 00 0c 	lw r12,(sp+12)
 3d4:	2b 8d 00 08 	lw r13,(sp+8)
 3d8:	37 9c 00 10 	addi sp,sp,16
 3dc:	c3 a0 00 00 	ret

000003e0 <isr_init>:

void isr_init()
{
 3e0:	78 01 00 00 	mvhi r1,0x0
 3e4:	78 02 00 00 	mvhi r2,0x0
 3e8:	38 21 09 b0 	ori r1,r1,0x9b0
 3ec:	38 42 02 c4 	ori r2,r2,0x2c4
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3f0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3f4:	58 22 00 00 	sw (r1+0),r2
 3f8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3fc:	5c 23 ff fe 	bne r1,r3,3f4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 400:	c3 a0 00 00 	ret

00000404 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 404:	78 03 00 00 	mvhi r3,0x0
 408:	3c 21 00 02 	sli r1,r1,2
 40c:	38 63 09 b0 	ori r3,r3,0x9b0
 410:	b4 61 18 00 	add r3,r3,r1
 414:	58 62 00 00 	sw (r3+0),r2
}
 418:	c3 a0 00 00 	ret

0000041c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 41c:	78 03 00 00 	mvhi r3,0x0
 420:	3c 21 00 02 	sli r1,r1,2
 424:	38 63 09 b0 	ori r3,r3,0x9b0
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	b4 61 18 00 	add r3,r3,r1
 430:	38 42 02 c4 	ori r2,r2,0x2c4
 434:	58 62 00 00 	sw (r3+0),r2
}
 438:	c3 a0 00 00 	ret

0000043c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 43c:	78 04 00 00 	mvhi r4,0x0
 440:	38 84 08 e4 	ori r4,r4,0x8e4
 444:	28 83 00 00 	lw r3,(r4+0)
 448:	78 02 00 00 	mvhi r2,0x0
 44c:	38 42 09 94 	ori r2,r2,0x994
 450:	28 42 00 00 	lw r2,(r2+0)
 454:	88 23 08 00 	mul r1,r1,r3
 458:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 45c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 460:	34 01 00 0a 	mvi r1,10
 464:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 468:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <msleep+0x2c>
}
 474:	c3 a0 00 00 	ret

00000478 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 09 94 	ori r2,r2,0x994
 480:	28 42 00 00 	lw r2,(r2+0)
 484:	08 21 00 64 	muli r1,r1,100
 488:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 48c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN| TIMER_IRQEN;
 490:	34 01 00 0a 	mvi r1,10
 494:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 498:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 49c:	20 21 00 01 	andi r1,r1,0x1
 4a0:	44 20 ff fe 	be r1,r0,498 <nsleep+0x20>
}
 4a4:	c3 a0 00 00 	ret

000004a8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	38 21 09 94 	ori r1,r1,0x994
 4b0:	28 23 00 00 	lw r3,(r1+0)
 4b4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4b8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4bc:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c0:	38 21 0a 30 	ori r1,r1,0xa30

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4c4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4cc:	78 02 00 00 	mvhi r2,0x0
 4d0:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4d4:	34 04 00 0e 	mvi r4,14
 4d8:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4dc:	38 21 09 b0 	ori r1,r1,0x9b0
 4e0:	38 42 02 c8 	ori r2,r2,0x2c8
 4e4:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4e8:	c3 a0 00 00 	ret

000004ec <wifi_getchar>:
		if (c ==':'){
			c = uart_getchar1();
			return c;
		}
	}
	return '\n';
 4ec:	78 01 00 00 	mvhi r1,0x0
 4f0:	38 21 09 a4 	ori r1,r1,0x9a4
 4f4:	28 22 00 00 	lw r2,(r1+0)


char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 4f8:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 4fc:	34 04 00 3a 	mvi r4,58


char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 500:	34 05 00 14 	mvi r5,20
##### UART1 #####
**********************************************************************/

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 504:	28 41 00 00 	lw r1,(r2+0)
 508:	20 21 00 01 	andi r1,r1,0x1
 50c:	44 20 ff fe 	be r1,r0,504 <wifi_getchar+0x18>
	return uart1->rxtx;
 510:	28 41 00 04 	lw r1,(r2+4)


char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 514:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 518:	20 21 00 ff 	andi r1,r1,0xff
 51c:	44 24 00 04 	be r1,r4,52c <wifi_getchar+0x40>


char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 520:	5c 65 ff f9 	bne r3,r5,504 <wifi_getchar+0x18>
		if (c ==':'){
			c = uart_getchar1();
			return c;
		}
	}
	return '\n';
 524:	34 01 00 0a 	mvi r1,10
}
 528:	c3 a0 00 00 	ret
##### UART1 #####
**********************************************************************/

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 52c:	28 41 00 00 	lw r1,(r2+0)
 530:	20 21 00 01 	andi r1,r1,0x1
 534:	44 20 ff fe 	be r1,r0,52c <wifi_getchar+0x40>
	return uart1->rxtx;
 538:	28 41 00 04 	lw r1,(r2+4)
 53c:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 540:	c3 a0 00 00 	ret

00000544 <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 544:	78 01 00 00 	mvhi r1,0x0
 548:	38 21 09 a4 	ori r1,r1,0x9a4
 54c:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 550:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 554:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 558:	34 05 00 1e 	mvi r5,30
##### UART1 #####
**********************************************************************/

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 55c:	28 41 00 00 	lw r1,(r2+0)
 560:	20 21 00 01 	andi r1,r1,0x1
 564:	44 20 ff fe 	be r1,r0,55c <ok+0x18>
	return uart1->rxtx;
 568:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 56c:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 570:	20 21 00 ff 	andi r1,r1,0xff
 574:	44 24 00 04 	be r1,r4,584 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 578:	5c 65 ff f9 	bne r3,r5,55c <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 57c:	34 01 00 00 	mvi r1,0
 580:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 584:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;
}
 588:	c3 a0 00 00 	ret

0000058c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 58c:	c3 a0 00 00 	ret

00000590 <uart_getchar>:

char uart_getchar()
{   
 590:	78 01 00 00 	mvhi r1,0x0
 594:	38 21 09 90 	ori r1,r1,0x990
 598:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 59c:	28 41 00 00 	lw r1,(r2+0)
 5a0:	20 21 00 01 	andi r1,r1,0x1
 5a4:	44 20 ff fe 	be r1,r0,59c <uart_getchar+0xc>
	return uart0->rxtx;
 5a8:	28 41 00 04 	lw r1,(r2+4)
}
 5ac:	20 21 00 ff 	andi r1,r1,0xff
 5b0:	c3 a0 00 00 	ret

000005b4 <uart_putchar>:

void uart_putchar(char c)
{
 5b4:	78 02 00 00 	mvhi r2,0x0
 5b8:	38 42 09 90 	ori r2,r2,0x990
 5bc:	28 43 00 00 	lw r3,(r2+0)
 5c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5c4:	28 62 00 00 	lw r2,(r3+0)
 5c8:	20 42 00 10 	andi r2,r2,0x10
 5cc:	5c 40 ff fe 	bne r2,r0,5c4 <uart_putchar+0x10>
	uart0->rxtx = c;
 5d0:	58 61 00 04 	sw (r3+4),r1
}
 5d4:	c3 a0 00 00 	ret

000005d8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5d8:	40 24 00 00 	lbu r4,(r1+0)
 5dc:	44 80 00 0b 	be r4,r0,608 <uart_putstr+0x30>
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 09 90 	ori r2,r2,0x990
 5e8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5ec:	28 62 00 00 	lw r2,(r3+0)
 5f0:	20 42 00 10 	andi r2,r2,0x10
 5f4:	5c 40 ff fe 	bne r2,r0,5ec <uart_putstr+0x14>
	uart0->rxtx = c;
 5f8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 5fc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 600:	40 24 00 00 	lbu r4,(r1+0)
 604:	5c 82 ff fa 	bne r4,r2,5ec <uart_putstr+0x14>
 608:	c3 a0 00 00 	ret

0000060c <uart_getchar1>:
/**********************************************************************
##### UART1 #####
**********************************************************************/

char uart_getchar1()
{   
 60c:	78 01 00 00 	mvhi r1,0x0
 610:	38 21 09 a4 	ori r1,r1,0x9a4
 614:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 618:	28 41 00 00 	lw r1,(r2+0)
 61c:	20 21 00 01 	andi r1,r1,0x1
 620:	44 20 ff fe 	be r1,r0,618 <uart_getchar1+0xc>
	return uart1->rxtx;
 624:	28 41 00 04 	lw r1,(r2+4)
}
 628:	20 21 00 ff 	andi r1,r1,0xff
 62c:	c3 a0 00 00 	ret

00000630 <uart_putchar1>:

void uart_putchar1(char c)
{   
 630:	78 02 00 00 	mvhi r2,0x0
 634:	38 42 09 a4 	ori r2,r2,0x9a4
 638:	28 43 00 00 	lw r3,(r2+0)
 63c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 640:	28 62 00 00 	lw r2,(r3+0)
 644:	20 42 00 10 	andi r2,r2,0x10
 648:	5c 40 ff fe 	bne r2,r0,640 <uart_putchar1+0x10>
	uart1->rxtx = c;
 64c:	58 61 00 04 	sw (r3+4),r1
}
 650:	c3 a0 00 00 	ret

00000654 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 654:	40 24 00 00 	lbu r4,(r1+0)
 658:	44 80 00 0b 	be r4,r0,684 <uart_putstr1+0x30>
 65c:	78 02 00 00 	mvhi r2,0x0
 660:	38 42 09 a4 	ori r2,r2,0x9a4
 664:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
 668:	28 62 00 00 	lw r2,(r3+0)
 66c:	20 42 00 10 	andi r2,r2,0x10
 670:	5c 40 ff fe 	bne r2,r0,668 <uart_putstr1+0x14>
	uart1->rxtx = c;
 674:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_gen_putchar(*c);
		c++;
 678:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 67c:	40 24 00 00 	lbu r4,(r1+0)
 680:	5c 82 ff fa 	bne r4,r2,668 <uart_putstr1+0x14>
 684:	c3 a0 00 00 	ret

00000688 <init_wifi>:

/***************************************************************************
 * UART WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como servidor con puerto 80
 688:	37 9c ff f8 	addi sp,sp,-8
 68c:	5b 8b 00 08 	sw (sp+8),r11
 690:	5b 9d 00 04 	sw (sp+4),ra
 694:	78 0b 00 00 	mvhi r11,0x0
 698:	39 6b 08 e8 	ori r11,r11,0x8e8
	}

	msleep(20);
	c = 0;*/
	while(c==0){
		uart_putstr1(" AT+RST\r\n");
 69c:	b9 60 08 00 	mv r1,r11
 6a0:	fb ff ff ed 	calli 654 <uart_putstr1>
		c = ok();
 6a4:	fb ff ff a8 	calli 544 <ok>
		c = ok();
	}

	msleep(20);
	c = 0;*/
	while(c==0){
 6a8:	44 20 ff fd 	be r1,r0,69c <init_wifi+0x14>
		uart_putstr1(" AT+RST\r\n");
		c = ok();
	}

    msleep(200);
 6ac:	34 01 00 c8 	mvi r1,200
 6b0:	78 0b 00 00 	mvhi r11,0x0
 6b4:	fb ff ff 62 	calli 43c <msleep>
 6b8:	39 6b 08 f4 	ori r11,r11,0x8f4
    c = 0;
    while(c==0){
		uart_putstr1("AT+CIPMUX=1\r\n");
 6bc:	b9 60 08 00 	mv r1,r11
 6c0:	fb ff ff e5 	calli 654 <uart_putstr1>
		c = ok();
 6c4:	fb ff ff a0 	calli 544 <ok>
		c = ok();
	}

    msleep(200);
    c = 0;
    while(c==0){
 6c8:	44 20 ff fd 	be r1,r0,6bc <init_wifi+0x34>
		uart_putstr1("AT+CIPMUX=1\r\n");
		c = ok();
	}

    msleep(20);
 6cc:	34 01 00 14 	mvi r1,20
 6d0:	78 0b 00 00 	mvhi r11,0x0
 6d4:	fb ff ff 5a 	calli 43c <msleep>
 6d8:	39 6b 09 04 	ori r11,r11,0x904
    c = 0;
	while (c==0){
		uart_putstr1("AT+CIPSERVER=1,80\r\n");
 6dc:	b9 60 08 00 	mv r1,r11
 6e0:	fb ff ff dd 	calli 654 <uart_putstr1>
		c = ok();
 6e4:	fb ff ff 98 	calli 544 <ok>
		c = ok();
	}

    msleep(20);
    c = 0;
	while (c==0){
 6e8:	44 20 ff fd 	be r1,r0,6dc <init_wifi+0x54>
		uart_putstr1("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}

    msleep(20);
 6ec:	34 01 00 14 	mvi r1,20
 6f0:	78 0b 00 00 	mvhi r11,0x0
 6f4:	fb ff ff 52 	calli 43c <msleep>
 6f8:	39 6b 09 18 	ori r11,r11,0x918
    c = 0;
    while(c==0){
		uart_putstr1("AT+CSWAP_CUR=\"guardDog\",\"mydog\",5,3\r\n");
 6fc:	b9 60 08 00 	mv r1,r11
 700:	fb ff ff d5 	calli 654 <uart_putstr1>
		c = ok();
 704:	fb ff ff 90 	calli 544 <ok>
		c = ok();
	}

    msleep(20);
    c = 0;
    while(c==0){
 708:	44 20 ff fd 	be r1,r0,6fc <init_wifi+0x74>
		uart_putstr1("AT+CSWAP_CUR=\"guardDog\",\"mydog\",5,3\r\n");
		c = ok();
	}

}
 70c:	2b 9d 00 04 	lw ra,(sp+4)
 710:	2b 8b 00 08 	lw r11,(sp+8)
 714:	37 9c 00 08 	addi sp,sp,8
 718:	c3 a0 00 00 	ret

0000071c <wifi_putstr>:
        uart_putstr1("AT+CIPCOLSE=0\r\n");
        c = ok();
    }
}

void wifi_putstr(char *a){
 71c:	37 9c ff e0 	addi sp,sp,-32
 720:	5b 8b 00 20 	sw (sp+32),r11
 724:	5b 8c 00 1c 	sw (sp+28),r12
 728:	5b 8d 00 18 	sw (sp+24),r13
 72c:	5b 8e 00 14 	sw (sp+20),r14
 730:	5b 8f 00 10 	sw (sp+16),r15
 734:	5b 90 00 0c 	sw (sp+12),r16
 738:	5b 91 00 08 	sw (sp+8),r17
 73c:	5b 9d 00 04 	sw (sp+4),ra
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 740:	40 24 00 00 	lbu r4,(r1+0)
 744:	78 0c 00 00 	mvhi r12,0x0
        uart_putstr1("AT+CIPCOLSE=0\r\n");
        c = ok();
    }
}

void wifi_putstr(char *a){
 748:	b8 20 30 00 	mv r6,r1
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 74c:	34 10 00 00 	mvi r16,0
 750:	39 8c 09 a4 	ori r12,r12,0x9a4
 754:	44 80 00 0c 	be r4,r0,784 <wifi_putstr+0x68>
 758:	29 83 00 00 	lw r3,(r12+0)
}

void wifi_putstr(char *a){
	int c = 0;   
	char *cc = a;
	int counter = 0;
 75c:	34 05 00 00 	mvi r5,0
	return uart1->rxtx;
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
 760:	28 62 00 00 	lw r2,(r3+0)
 764:	20 42 00 10 	andi r2,r2,0x10
 768:	5c 40 ff fe 	bne r2,r0,760 <wifi_putstr+0x44>
	char *cc = a;
	int counter = 0;
	while(*cc) {
		uart_putchar1(*cc);
		cc++;
		counter ++;
 76c:	34 a5 00 01 	addi r5,r5,1
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
	uart1->rxtx = c;
 770:	58 64 00 04 	sw (r3+4),r4
        uart_putstr1("AT+CIPCOLSE=0\r\n");
        c = ok();
    }
}

void wifi_putstr(char *a){
 774:	b4 c5 08 00 	add r1,r6,r5
	int c = 0;   
	char *cc = a;
	int counter = 0;
	while(*cc) {
 778:	40 24 00 00 	lbu r4,(r1+0)
 77c:	5c 82 ff f9 	bne r4,r2,760 <wifi_putstr+0x44>
 780:	b8 a0 80 00 	mv r16,r5
 784:	78 0f 00 00 	mvhi r15,0x0
 788:	78 0e 00 00 	mvhi r14,0x0
 78c:	20 d1 00 ff 	andi r17,r6,0xff
 790:	39 ef 09 40 	ori r15,r15,0x940
 794:	39 ce 09 50 	ori r14,r14,0x950
		cc++;
		counter ++;
	}

	while(c == 0){
		uart_putstr1("AT+CIPSEND=0,");
 798:	b9 e0 08 00 	mv r1,r15
 79c:	fb ff ff ae 	calli 654 <uart_putstr1>
		uart_putstr1(counter);
 7a0:	ba 00 08 00 	mv r1,r16
 7a4:	fb ff ff ac 	calli 654 <uart_putstr1>
		uart_putstr1("\r\n");
 7a8:	b9 c0 08 00 	mv r1,r14
 7ac:	fb ff ff aa 	calli 654 <uart_putstr1>
		//uart_putstr("hala");		//posible control de salida
		msleep(20);
 7b0:	34 01 00 14 	mvi r1,20
 7b4:	fb ff ff 22 	calli 43c <msleep>
 7b8:	29 82 00 00 	lw r2,(r12+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
 7bc:	28 4b 00 00 	lw r11,(r2+0)
 7c0:	21 6b 00 10 	andi r11,r11,0x10
 7c4:	5d 60 ff fe 	bne r11,r0,7bc <wifi_putstr+0xa0>
	uart1->rxtx = c;
 7c8:	58 51 00 04 	sw (r2+4),r17
		uart_putstr1(counter);
		uart_putstr1("\r\n");
		//uart_putstr("hala");		//posible control de salida
		msleep(20);
		uart_gen_putchar(a);
		c = ok();
 7cc:	fb ff ff 5e 	calli 544 <ok>
 7d0:	b8 20 68 00 	mv r13,r1
		msleep(20);
 7d4:	34 01 00 14 	mvi r1,20
 7d8:	fb ff ff 19 	calli 43c <msleep>
		uart_putchar1(*cc);
		cc++;
		counter ++;
	}

	while(c == 0){
 7dc:	45 ab ff ef 	be r13,r11,798 <wifi_putstr+0x7c>
 7e0:	78 0b 00 00 	mvhi r11,0x0
 7e4:	39 6b 09 54 	ori r11,r11,0x954
		c = ok();
		msleep(20);
	}
	c = 0; 	  
	while(c == 0){
		uart_putstr1("AT+CIPCLOSE=0\r\n");
 7e8:	b9 60 08 00 	mv r1,r11
 7ec:	fb ff ff 9a 	calli 654 <uart_putstr1>
		c = ok();
 7f0:	fb ff ff 55 	calli 544 <ok>
		uart_gen_putchar(a);
		c = ok();
		msleep(20);
	}
	c = 0; 	  
	while(c == 0){
 7f4:	44 20 ff fd 	be r1,r0,7e8 <wifi_putstr+0xcc>
		uart_putstr1("AT+CIPCLOSE=0\r\n");
		c = ok();
	}
}
 7f8:	2b 9d 00 04 	lw ra,(sp+4)
 7fc:	2b 8b 00 20 	lw r11,(sp+32)
 800:	2b 8c 00 1c 	lw r12,(sp+28)
 804:	2b 8d 00 18 	lw r13,(sp+24)
 808:	2b 8e 00 14 	lw r14,(sp+20)
 80c:	2b 8f 00 10 	lw r15,(sp+16)
 810:	2b 90 00 0c 	lw r16,(sp+12)
 814:	2b 91 00 08 	lw r17,(sp+8)
 818:	37 9c 00 20 	addi sp,sp,32
 81c:	c3 a0 00 00 	ret

00000820 <wifi_putchar>:
		c = ok();
	}

}

void wifi_putchar(char a){
 820:	37 9c ff e8 	addi sp,sp,-24
 824:	5b 8b 00 18 	sw (sp+24),r11
 828:	5b 8c 00 14 	sw (sp+20),r12
 82c:	5b 8d 00 10 	sw (sp+16),r13
 830:	5b 8e 00 0c 	sw (sp+12),r14
 834:	5b 8f 00 08 	sw (sp+8),r15
 838:	5b 9d 00 04 	sw (sp+4),ra
 83c:	78 0e 00 00 	mvhi r14,0x0
 840:	78 0d 00 00 	mvhi r13,0x0
 844:	20 2f 00 ff 	andi r15,r1,0xff
 848:	39 ce 09 64 	ori r14,r14,0x964
 84c:	39 ad 09 a4 	ori r13,r13,0x9a4
	int c = 0; 	  
	while(c == 0){
		uart_putstr1("AT+CIPSEND=0,1\r\n");
 850:	b9 c0 08 00 	mv r1,r14
 854:	fb ff ff 80 	calli 654 <uart_putstr1>
        msleep(20);
 858:	34 01 00 14 	mvi r1,20
 85c:	fb ff fe f8 	calli 43c <msleep>
 860:	29 a2 00 00 	lw r2,(r13+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
 864:	28 4b 00 00 	lw r11,(r2+0)
 868:	21 6b 00 10 	andi r11,r11,0x10
 86c:	5d 60 ff fe 	bne r11,r0,864 <wifi_putchar+0x44>
	uart1->rxtx = c;
 870:	58 4f 00 04 	sw (r2+4),r15
	int c = 0; 	  
	while(c == 0){
		uart_putstr1("AT+CIPSEND=0,1\r\n");
        msleep(20);
        uart_gen_putchar(a);
		c = ok();
 874:	fb ff ff 34 	calli 544 <ok>
 878:	b8 20 60 00 	mv r12,r1
        msleep(100);
 87c:	34 01 00 64 	mvi r1,100
 880:	fb ff fe ef 	calli 43c <msleep>

}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
 884:	45 8b ff f3 	be r12,r11,850 <wifi_putchar+0x30>
 888:	78 0b 00 00 	mvhi r11,0x0
 88c:	39 6b 09 78 	ori r11,r11,0x978
		c = ok();
        msleep(100);
	}
    c = 0;
    while(c==0){
        uart_putstr1("AT+CIPCOLSE=0\r\n");
 890:	b9 60 08 00 	mv r1,r11
 894:	fb ff ff 70 	calli 654 <uart_putstr1>
        c = ok();
 898:	fb ff ff 2b 	calli 544 <ok>
        uart_gen_putchar(a);
		c = ok();
        msleep(100);
	}
    c = 0;
    while(c==0){
 89c:	44 20 ff fd 	be r1,r0,890 <wifi_putchar+0x70>
        uart_putstr1("AT+CIPCOLSE=0\r\n");
        c = ok();
    }
}
 8a0:	2b 9d 00 04 	lw ra,(sp+4)
 8a4:	2b 8b 00 18 	lw r11,(sp+24)
 8a8:	2b 8c 00 14 	lw r12,(sp+20)
 8ac:	2b 8d 00 10 	lw r13,(sp+16)
 8b0:	2b 8e 00 0c 	lw r14,(sp+12)
 8b4:	2b 8f 00 08 	lw r15,(sp+8)
 8b8:	37 9c 00 18 	addi sp,sp,24
 8bc:	c3 a0 00 00 	ret

000008c0 <uart_gen_putchar>:
		c++;
	}
}

void uart_gen_putchar(char c)
{
 8c0:	78 02 00 00 	mvhi r2,0x0
 8c4:	38 42 09 a4 	ori r2,r2,0x9a4
 8c8:	28 43 00 00 	lw r3,(r2+0)
 8cc:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{   
	while (uart1->ucr & UART_BUSY) ;
 8d0:	28 62 00 00 	lw r2,(r3+0)
 8d4:	20 42 00 10 	andi r2,r2,0x10
 8d8:	5c 40 ff fe 	bne r2,r0,8d0 <uart_gen_putchar+0x10>
	uart1->rxtx = c;
 8dc:	58 61 00 04 	sw (r3+4),r1
}

void uart_gen_putchar(char c)
{
    uart_putchar1(c);
}
 8e0:	c3 a0 00 00 	ret
